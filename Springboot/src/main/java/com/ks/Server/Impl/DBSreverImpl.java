package com.ks.Server.Impl;import com.ks.DB.DataSource1;import com.ks.Server.DBSrever;import com.ks.common.Base.BaseServiceImpl;import com.ks.dao.DBDao;import org.springframework.stereotype.Service;/** * HZW 2021-06-18 15:46 *//** * HZW 2021-07-13 15:11 */@Servicepublic class  DBSreverImpl extends BaseServiceImpl<DBDao, DataSource1> implements DBSrever {//    @Resource//    private DBDao dataSourceDao;//    @Resource//    private DynamicDataSource dynamicDataSource;//    /**//     * mybatisplus  的构造器 wrapper 运用//     * List<Role> roles=service.list(new QueryWrapper<Role>().like("role_code",name));//     *         wrapper.groupBy(columns)  //对应sql中分组//     *         wrapper.eq(column, params) //相当于where条件//     *         wrapper.in(column, value) //sql中in//     *         wrapper.notIn(column, value) //sql中 not in//     *         wrapper.orderBy(columns, isAsc) //排序//     *         wrapper.exists(value) //相对于sql中exists查询//     *         wrapper.notExists(value) //相当于sql中not exists查询//     *         wrapper.notBetween(column, val1, val2) //相当于sql中在某个范围内使用的between//     *         wrapper.ge(column, params) //大于等于//     *         wrapper.le(column, params) //小于等于//     *         wrapper.like(column, value) //模糊查询//     *         wrapper.having(sqlHaving, params) //条件过滤//     * @param datasourceId//     * @return//     */////////    @SneakyThrows//    @Override//    public boolean changeDb(String datasourceId)   {//        //默认切换到主数据源,进行整体资源的查找//        //DBContextHolder.clearDataSource();//        Map<String,Object> map=new HashMap<>();//        map.put("DatasourceId","test");//////        DataSource datasourceId1 = dataSourceDao.selectOne(new QueryWrapper<DataSource>().eq("DatasourceId", datasourceId));//        System.out.println("需要使用的的数据源已经找到,datasourceId是：" + datasourceId1.getDatasourceId());//                //创建数据源连接&检查 若存在则不需重新创建//                dynamicDataSource.createDataSourceWithCheck(datasourceId1);//                //切换到该数据源//                DBContextHolder.setDataSource(datasourceId1.getDatasourceId());//                return true;//       }}